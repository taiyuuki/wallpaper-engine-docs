(window.webpackJsonp=window.webpackJsonp||[]).push([[173],{531:function(t,e,s){"use strict";s.r(e);var a=s(26),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"additional-corsair-icue-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-corsair-icue-functions"}},[t._v("#")]),t._v(" Additional Corsair iCUE functions")]),t._v(" "),s("p",[t._v("Wallpaper Engine also allows you to access specific Corsair iCUE SDK functions directly, though this is specifically limited to iCUE. This is likely not necessary for the large majority of use-cases and the advice in the general "),s("a",{attrs:{href:"/web/api/rgb"}},[t._v("RGB Hardware Support")]),t._v(" guide should suffice for most cases.")]),t._v(" "),s("h2",{attrs:{id:"function-overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-overview"}},[t._v("#")]),t._v(" Function overview")]),t._v(" "),s("p",[t._v("The following functions are available via the "),s("code",[t._v("window.cue")]),t._v(" object. Make sure to first check if the "),s("code",[t._v("cue")]),t._v(" plugin is loaded via the "),s("code",[t._v("window.wallpaperPluginListener")]),t._v(" as explained in the "),s("a",{attrs:{href:"/web/api/rgb"}},[t._v("RGB Hardware Support")]),t._v(" article.")]),t._v(" "),s("p",[t._v("In order to work with this guide, you need to look at the source code of the iCUE C++ SDK in cases where we mention certain files or functions below. A simple web search will usually allow you to find the source code, as it is open source.")]),t._v(" "),s("h3",{attrs:{id:"getprotocoldetails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getprotocoldetails"}},[t._v("#")]),t._v(" getProtocolDetails")]),t._v(" "),s("p",[t._v("Returns current status and version of iCUE SDK.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairProtocolDetails")]),t._v(" returned after handshake with iCUE.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProtocolDetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("protocolDetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("See "),s("code",[t._v("CorsairProtocolDetails")]),t._v(" in C++ SDK.")]),t._v(" "),s("p",[s("code",[t._v("protocolDetails")]),t._v(" members:")]),t._v(" "),s("ul",[s("li",[t._v("sdkVersion")]),t._v(" "),s("li",[t._v("serverVersion")]),t._v(" "),s("li",[t._v("sdkProtocolVersion")]),t._v(" "),s("li",[t._v("serverProtocolVersion")]),t._v(" "),s("li",[t._v("breakingChanges")])]),t._v(" "),s("h3",{attrs:{id:"getdevicecount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getdevicecount"}},[t._v("#")]),t._v(" getDeviceCount")]),t._v(" "),s("p",[t._v("Returns the number of recognized iCUE compatible devices on the system.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairGetDeviceCount();")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeviceCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deviceCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"getdeviceinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getdeviceinfo"}},[t._v("#")]),t._v(" getDeviceInfo")]),t._v(" "),s("p",[t._v("Returns all information specific to a single device.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairGetDeviceInfo();")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeviceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deviceIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deviceInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("deviceInfo")]),t._v(" members:")]),t._v(" "),s("ul",[s("li",[t._v("type: see CorsairDeviceType in CUESDK.h")]),t._v(" "),s("li",[t._v("model: human readable name of the device")]),t._v(" "),s("li",[t._v("physicalLayout: see CorsairPhysicalLayout in CUESDK.h")]),t._v(" "),s("li",[t._v("logicalLayout: see CorsairLogicalLayout in CUESDK.h")]),t._v(" "),s("li",[t._v("ledCount: number of available LEDs")]),t._v(" "),s("li",[t._v("capsMask: see CorsairDeviceCaps in CUESDK.h")])]),t._v(" "),s("h3",{attrs:{id:"getledpositionsbydeviceindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getledpositionsbydeviceindex"}},[t._v("#")]),t._v(" getLedPositionsByDeviceIndex")]),t._v(" "),s("p",[t._v("Returns all available LED information for specified device.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairGetLedPositionsByDeviceIndex();")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLedPositionsByDeviceIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arrayOfLEDs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("See "),s("code",[t._v("CorsairLedPosition")]),t._v(" in C++ SDK.")]),t._v(" "),s("p",[t._v("Members of objects in "),s("code",[t._v("arrayOfLEDs")]),t._v(" array:")]),t._v(" "),s("ul",[s("li",[t._v("ledId: CorsairLedId as integer")]),t._v(" "),s("li",[t._v("ledIdName: CorsairLedId as string")]),t._v(" "),s("li",[t._v("top: value in mm")]),t._v(" "),s("li",[t._v("left: value in mm")]),t._v(" "),s("li",[t._v("width: value in mm")]),t._v(" "),s("li",[t._v("height: value in mm")])]),t._v(" "),s("h3",{attrs:{id:"setledscolorsasync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setledscolorsasync"}},[t._v("#")]),t._v(" setLedsColorsAsync")]),t._v(" "),s("p",[t._v("Updates all LEDs specified via parameter. List all available LEDs via "),s("code",[t._v("getLedPositionsByDeviceIndex")]),t._v(" above.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairSetLedsColorsAsync();")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLedsColorsAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayOfLEDColors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Members of objects in "),s("code",[t._v("arrayOfLEDColors")]),t._v(" array (see "),s("code",[t._v("CorsairLedColor")]),t._v(" in C++ SDK):")]),t._v(" "),s("ul",[s("li",[t._v("ledId: CorsairLedId as integer")]),t._v(" "),s("li",[t._v("r")]),t._v(" "),s("li",[t._v("g")]),t._v(" "),s("li",[t._v("b")])]),t._v(" "),s("h3",{attrs:{id:"setallledscolorsasync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setallledscolorsasync"}},[t._v("#")]),t._v(" setAllLedsColorsAsync")]),t._v(" "),s("p",[t._v("Updates all LEDs for given devices to one specific color.")]),t._v(" "),s("p",[s("strong",[t._v("C++ SDK equivalent to "),s("code",[t._v("CorsairSetLedsColorsAsync();")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAllLedsColorsAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deviceIndexOrArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LEDColor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Members of "),s("code",[t._v("LEDColor")]),t._v(" (see "),s("code",[t._v("CorsairLedColor")]),t._v(" in C++ SDK):")]),t._v(" "),s("ul",[s("li",[t._v("ledId: CorsairLedId as integer")]),t._v(" "),s("li",[t._v("r")]),t._v(" "),s("li",[t._v("g")]),t._v(" "),s("li",[t._v("b")])]),t._v(" "),s("h3",{attrs:{id:"setledcolorsbyimagedata"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setledcolorsbyimagedata"}},[t._v("#")]),t._v(" setLedColorsByImageData")]),t._v(" "),s("p",[t._v("Updates all LEDs of given devices based on an RGB bitmap provided from an HTML canvas, for example.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLedColorsByImageData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deviceIndexOrArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encodedImageData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This function is very similar to "),s("code",[t._v("window.wpPlugins.led.setAllDevicesByImageData")]),t._v(" as explained in the main "),s("a",{attrs:{href:"/web/api/rgb"}},[t._v("RGB Hardware Support")]),t._v(" guide. The main difference is that it requires you to supply a specific "),s("code",[t._v("deviceIndexOrArray")]),t._v(" as the first parameter.")])])}),[],!1,null,null,null);e.default=n.exports}}]);