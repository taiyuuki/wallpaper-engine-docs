(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{465:function(e,a,t){"use strict";t.r(a);var s=t(26),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"scenescript-class-audiobuffers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scenescript-class-audiobuffers"}},[e._v("#")]),e._v(" SceneScript Class AudioBuffers")]),e._v(" "),t("p",[e._v("Provides access to the left and right audio spectrum values and their combined average. The "),t("code",[e._v("left")]),e._v(", "),t("code",[e._v("right")]),e._v(" and "),t("code",[e._v("average")]),e._v(" arrays always have the same size as defined in the "),t("code",[e._v("resolution")]),e._v(" parameter of "),t("a",{attrs:{href:"/wallpaper-engine-docs/scene/scenescript/reference/class/IEngine"}},[e._v("engine.registerAudioBuffers(resolution: Number)")]),e._v(". Their contents will be updated for every frame automatically, so you can continuously read the audio levels from this object.")]),e._v(" "),t("p",[e._v("If you have initialized this object with a resolution of "),t("code",[e._v("16")]),e._v(" for example, then accessing either "),t("code",[e._v("left[0]")]),e._v(", "),t("code",[e._v("right[0]")]),e._v(" or "),t("code",[e._v("average[0]")]),e._v(" would return you the current audio levels of low bass frequencies which is useful for detecting beats and most commonly used in Wallpaper Engine. Accessing "),t("code",[e._v("left[15]")]),e._v(", "),t("code",[e._v("right[15]")]),e._v(" or "),t("code",[e._v("average[15]")]),e._v(" would be for high treble frequencies, while all values in between represent a specific audio frequency range.")]),e._v(" "),t("p",[e._v("The volume levels typically range from "),t("code",[e._v("0.00")]),e._v(" to "),t("code",[e._v("1.00")]),e._v(", though they may also in some cases reach higher values than "),t("code",[e._v("1.00")]),e._v(". If this is a problem for your use-case, you can utilize "),t("code",[e._v("Math.min()")]),e._v(" to limit the values to "),t("code",[e._v("1.00")]),e._v(". For example:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("Math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" audioBuffers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("average"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("h2",{attrs:{id:"properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),t("h3",{attrs:{id:"average-float32array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#average-float32array"}},[e._v("#")]),e._v(" average: Float32Array")]),e._v(" "),t("p",[e._v("This is the arithmetic mean of both channels ("),t("code",[e._v("left")]),e._v(" and "),t("code",[e._v("right")]),e._v(") divided by half.")]),e._v(" "),t("p",[e._v("We recommend using this property unless you specifically want to work with the audio data from both channels independently.")]),e._v(" "),t("h3",{attrs:{id:"left-float32array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#left-float32array"}},[e._v("#")]),e._v(" left: Float32Array")]),e._v(" "),t("p",[e._v("Array that contains the audio volume levels of the left audio channel.")]),e._v(" "),t("h3",{attrs:{id:"right-float32array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#right-float32array"}},[e._v("#")]),e._v(" right: Float32Array")]),e._v(" "),t("p",[e._v("Array that contains the audio volume levels of the left audio channel.")])])}),[],!1,null,null,null);a.default=r.exports}}]);